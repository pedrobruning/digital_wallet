<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Tests\TestCase;

class TransactionsTest extends TestCase
{
    use WithFaker, RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        User::factory(10)->create();
    }

    public function testUnauthenticatedUserCantMakeATransaction()
    {
        $randomUser = User::inRandomOrder()->first();
        $uri = '/api/transactions/' . $randomUser->id;

        $payload = [
            'value' => 1000
        ];

        $headers = [
            'Accept' => 'content/json'
        ];

        $response = $this->post($uri, $payload, $headers);

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $response->assertJson([
            'message' => 'Unauthenticated.'
        ]);

    }

    public function testAuthenticatedDefaultUserWithEnougthBalanceCanMakeATransaction()
    {
        $user = User::factory()->create([
            'balance' => 1000
        ]);

        $randomUser = User::inRandomOrder()->first();

        $uri = '/api/transactions/' . $randomUser->id;

        $payload = [
            'value' => 1000
        ];

        $headers = [
            'Accept' => 'content/json'
        ];

        $response = $this->actingAs($user)->post($uri, $payload, $headers);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJson([
            'message' => 'Transaction made Successfully!',
            'data' => [
                'new_balance' => 0
            ]
        ]);
    }

    public function testAuthenticatedDefaultUserWithoutEnoughBalanceCantMakeATransaction()
    {
        $user = User::factory()->create([
            'balance' => 500
        ]);

        $randomUser = User::inRandomOrder()->first();

        $uri = '/api/transactions/' . $randomUser->id;

        $payload = [
            'value' => 1000
        ];

        $headers = [
            'Accept' => 'content/json'
        ];

        $response = $this->actingAs($user)->post($uri, $payload, $headers);
        
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
        $response->assertJson([
            'message' => 'The given data was invalid.',
            'errors' => [
                'value' => [
                    'You do not have enough balance to complete the transaction.'
                ]
            ]
        ]);
    }

    public function testAuthenticatedRetailerUserCantMakeATransaction()
    {
        $user = User::factory()->create([
            'balance' => 30000,
            'is_retailer' => true
        ]);

        $randomUser = User::inRandomOrder()->first();

        $uri = '/api/transactions/' . $randomUser->id;

        $payload = [
            'value' => 1000
        ];

        $headers = [
            'Accept' => 'content/json'
        ];

        $response = $this->actingAs($user)->post($uri, $payload, $headers);

        $response->assertStatus(Response::HTTP_FORBIDDEN);
        $response->assertJson([
            'message' => 'Retailer accounts are not allowed to make transactions.'
        ]);
    }
}
